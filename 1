#include<windowsx.h>
#include<iostream>
#include<cstdio>
#include<time.h>
#include <Windows.h>
#include <stdlib.h>
#include <math.h>

using namespace std;

struct type_matrix_point
{
    int index; //для обращения к массиву, хранящему эту же клетку
    int color; //0 - пусто, 1 - зелёный, 2 - жёлтый
};

const int matrix_size = 50;
const int size_of_cell = 11;
type_matrix_point matrix[matrix_size][matrix_size], new_matrix[matrix_size][matrix_size];
HDC hDC = GetDC( GetConsoleWindow( ) ); 

void Crate_Place()//прорисовка клетчатого поля
{  
    HPEN Pen = CreatePen( PS_SOLID, 1, RGB(255, 255, 255));
    SelectObject( hDC, Pen );
   /* MoveToEx( hDC, 0, 85, NULL );
    LineTo( hDC, 200, 85 );
    MoveToEx( hDC, 100, 0, NULL );
    LineTo( hDC, 100, 170 );*/
    for(int i = 0; i <= matrix_size; i++)
    {
        MoveToEx( hDC, 0, i*(size_of_cell+1), NULL );
        LineTo( hDC, matrix_size*(size_of_cell+1), i*(size_of_cell+1));
        MoveToEx( hDC, i*(size_of_cell+1), 0, NULL );
        LineTo( hDC, i*(size_of_cell+1), matrix_size*(size_of_cell+1));
    }
}

void Update_Cell(int i, int j)//обновление отображения ячейки
{
    int y = size_of_cell/2+1+i*(size_of_cell+1);
    int x = size_of_cell/2+1+j*(size_of_cell+1);
    HPEN Pen = CreatePen(PS_SOLID, 10, RGB(0, 0, 0));
        if (matrix[i][j].color==0)
        {
            Pen = CreatePen(PS_SOLID, 10, RGB(0, 0, 0));
        }
        if (matrix[i][j].color==1)
        {
            Pen = CreatePen(PS_SOLID, 10, RGB(0, 255, 0));
        }
        if (matrix[i][j].color==2)
        {
            Pen = CreatePen(PS_SOLID, 10, RGB(255, 255, 0));
        }
        SelectObject( hDC, Pen );
        MoveToEx( hDC, x, y, NULL );
        LineTo( hDC, x, y);
}

void Set_Start_Data()//начальные значения, положения живых клеток
{
    int i,j;
    type_matrix_point start_value;
    start_value.color = 0;
    start_value.index = 0;
    for(i = 0; i < matrix_size; i++)
        for(j = 0; j < matrix_size; j++)
            matrix[i][j] = start_value;

    //пока только цвет (индекс для будущего алгоритма)
    start_value.color = 2;
    matrix[1][1] = start_value;
    matrix[2][1] = start_value;
    matrix[1][2] = start_value;
    matrix[2][3] = start_value;
    matrix[3][3] = start_value;
    matrix[3][2] = start_value;
    matrix[3][4] = start_value;

    for(i = 0; i < matrix_size; i++)
    {
        for(j = 0; j < matrix_size; j++)
        {
            new_matrix[i][j] = matrix[i][j];
            Update_Cell(i,j);
        }
    }
}

bool Show_Console_Cursor(bool bShow)//функция отображения курсора
{
    CONSOLE_CURSOR_INFO cci;
    HANDLE hStdOut;
    hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
    if(hStdOut == INVALID_HANDLE_VALUE)
        return false;
    if(!GetConsoleCursorInfo(hStdOut, &cci))
        return false;
    cci.bVisible = bShow;
    if(!SetConsoleCursorInfo(hStdOut,&cci))
        return false;
    return true;
}

void Update_Matrix_Cells()//обновление матрицы и её отображения
{
    int i, j;
    for(i = 0; i < matrix_size; i++)
        for(j = 0; j < matrix_size; j++)
            if(matrix[i][j].color != new_matrix[i][j].color)
            {
                matrix[i][j] = new_matrix[i][j];
                Update_Cell(i,j);
            }
}

void Set_Console_Window()//красивое отображение консольного окна
{    
    //изменение размера окна, кол-во строк и столбцов
    system("mode con cols=75 lines=50");
    HWND wind_1 = GetForegroundWindow();
    COORD bufferSize = {matrix_size*(size_of_cell+1), matrix_size*(size_of_cell+1)};
    SetConsoleScreenBufferSize(wind_1, bufferSize);
    MoveWindow(wind_1,350,50, (matrix_size+5)*(size_of_cell+1),(matrix_size+7)*(size_of_cell+1),true);

    //изменение стиля окна (убрать лишние клавиши)
    SetWindowLongPtr(wind_1, GWL_STYLE, WS_CAPTION | WS_SYSMENU ); 

    //убираем курсор
    Show_Console_Cursor(false);

    //Изменяем заголовок окна
    SetConsoleTitle("Project Life");

    //перересуем окно
    SetWindowRedraw(wind_1, true);
}

int main()
{   
    Set_Console_Window();
    Crate_Place();
    Set_Start_Data();

    int time = clock();
    int fps = 5, sec = 1000;
    while (true)
    {
        int current_time = clock();
        if(current_time > time + sec/fps || current_time < time)
        {
            time = current_time;
            switch(matrix[7][7].color)
            {
                case 0: new_matrix[7][7].color = 1; break;
                case 1: new_matrix[7][7].color = 2; break;
                case 2: new_matrix[7][7].color = 0; break;
            }
            Update_Matrix_Cells();
            //system("cls");
            //Crate_Place();
        }
    }
    return 0;
}
